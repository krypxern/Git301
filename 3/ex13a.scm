(val emptyset (lambda (x) #f))
(define member? (x s) (s x))

(define add-member (x s)
	(lambda (y) (or (s y) (= y x)))
) 
(define union (s1 s2)
	(lambda (x) (or (s1 x) (s2 x)))
)
(define inter (s1 s2)
	(lambda (x) (and (s1 x) (s2 x)))
)

(define xor (b1 b2)
	(or (and b1 (not b2)) (and (not b1) b2))
)

(define diff (s1 s2)
	(lambda (x) (xor (s1 x) (s2 x)))
)

(+ 1234 8765)
(equal? #f (member? 1 emptyset))
(equal? #t (member? 1 (lambda (x) (> x 0))))
(equal? #t ((inter (lambda (x) (> x -1)) (lambda (x) (< x 1))) 0))
(equal? #f ((inter (lambda (x) (> x -1)) (lambda (x) (< x 1))) 1))
(equal? #t ((add-member 1 (lambda (x) (< x 0))) -1 ))
(equal? #t ((add-member 1 (lambda (x) (< x 0))) 1 ))
(equal? #f ((add-member 1 (lambda (x) (< x 0))) 2 ))
(equal? #t ((diff (lambda (x) (< x -1)) (lambda (x) (> x -3))) 0))
(equal? #f ((diff (lambda (x) (< x -1)) (lambda (x) (> x -3))) -2))
(equal? #f ((union (lambda (x) (< x -1)) (lambda (x) (> x 1))) 0))
(equal? #t ((union (lambda (x) (< x -1)) (lambda (x) (> x 1))) 2))

